hub:
  config:
    Authenticator:
      admin_users:
        - "asmacdo"
        - "dandibot"
        - "satra"
        - "yarikoptic"
  extraConfig:
    myConfig: |
      # Python executed by jupyterhub at startup
      import json
      import os
      import warnings
      from kubernetes_asyncio import client
      from oauthenticator.github import GitHubOAuthenticator
      from tornado.httpclient import AsyncHTTPClient, HTTPClientError, HTTPRequest

      def modify_pod_hook(spawner, pod):  # noqa
          pod.spec.containers[0].security_context = client.V1SecurityContext(privileged=True)
          return pod

      # define our OAuthenticator with `.pre_spawn_start`
      # for passing auth_state into the user environment
      # Based on <https://github.com/jupyterhub/oauthenticator/blob/master/examples/auth_state/jupyterhub_config.py>:  # noqa
      class IsDandiUserAuthenticator(GitHubOAuthenticator):
          async def check_allowed(self, username, auth_model):
              """
              Query DANDI API to ensure user is registered.
              """
              if auth_model["auth_state"].get("scope", []):
                  scopes = []
                  for val in auth_model["auth_state"]["scope"]:
                      scopes.extend(val.split(","))
                  auth_model["auth_state"]["scope"] = scopes
              auth_model = await self.update_auth_model(auth_model)

              # Allowed if admin
              if await super().check_allowed(username, auth_model):
                  return True

              # Allowed if user is a registered DANDI user.
              req = HTTPRequest(
                  f"${dandi_api_domain}/api/users/search/?username={username}",  # noqa
                  method="GET",
                  headers={
                      "Accept": "application/json",
                      "User-Agent": "JupyterHub",
                      "Authorization": "token ${danditoken}",
                  },
                  validate_cert=self.validate_server_cert,
              )
              try:
                  client = AsyncHTTPClient()
                  print(f"Attempting to validate {username} with ${dandi_api_domain}")  # noqa
                  resp = await client.fetch(req)
              except HTTPClientError as e:
                  print(
                      f"Dandi API request to validate {username} returned HTTPClientError: {e}"
                  )
                  return False
              else:
                  if resp.body:
                      resp_json = json.loads(resp.body.decode("utf8", "replace"))
                      for val in resp_json:
                          if val["username"].lower() == username.lower():
                              return True

              # If not explicitly allowed, not allowed.
              return False

          async def pre_spawn_start(self, user, spawner):
              auth_state = await user.get_auth_state()
              if not auth_state:
                  # user has no auth state
                  return
              # define some environment variables from auth_state
              spawner.environment["GITHUB_TOKEN"] = auth_state["access_token"]
              spawner.environment["GITHUB_USER"] = auth_state["github_user"]["login"]
              spawner.environment["GITHUB_EMAIL"] = auth_state["github_user"]["email"]
      c.KubeSpawner.modify_pod_hook = modify_pod_hook  # noqa
      c.JupyterHub.authenticator_class = IsDandiUserAuthenticator  # noqa
      c.GitHubOAuthenticator.enable_auth_state = True  # noqa

singleuser:
  lifecycleHooks:
    postStart:
      exec:
        command:
          - "sh"
          - "-c"
          - >
            gitpuller https://github.com/dandi/example-notebooks master dandi-notebooks;
            chown -R jovyan:users dandi-notebooks;
            datalad install https://github.com/dandi/dandisets;
            /opt/conda/envs/allen/bin/python -m ipykernel install --user --name allen --display-name "Python (Allen SDK)";
            /opt/conda/bin/pip install --upgrade dandi;
            git config --global user.email "$${GITHUB_EMAIL}";
            git config --global user.name "$${GITHUB_USER}"

  profileList:
    - display_name: "Base"
      description: "6 CPU / 16 GB up to 12C/32G. May take up to 15 mins to start."
      profile_options:
        image:
          display_name: "Image"
          choices:
            standard:
              display_name: "Standard"
              default: true
              kubespawner_override:
                image: "${singleuser_image_repo}:${singleuser_image_tag}"
            matlab:
              display_name: "MATLAB (must provide your own license)"
              kubespawner_override:
                image: "${singleuser_image_repo}:${singleuser_image_tag}-matlab"
      default: true
      kubespawner_override:
        image_pull_policy: Always
        cpu_limit: 12
        cpu_guarantee: 6
        mem_limit: 32G
        mem_guarantee: 16G
        node_selector:
          NodePool: default
    - display_name: "Medium"
      description: "12C/32G up to 24C/64G. May take up to 15 mins to start."
      profile_options:
        image:
          display_name: "Image"
          choices:
            standard:
              display_name: "Standard"
              default: true
              kubespawner_override:
                image: "${singleuser_image_repo}:${singleuser_image_tag}"
            matlab:
              display_name: "MATLAB (must provide your own license)"
              kubespawner_override:
                image: "${singleuser_image_repo}:${singleuser_image_tag}-matlab"
      kubespawner_override:
        image_pull_policy: Always
        cpu_limit: 24
        cpu_guarantee: 12
        mem_limit: 64G
        mem_guarantee: 32G
        node_selector:
          NodePool: default
    - display_name: "Large"
      description: "24C/64G up to 48C/96G. May take up to 15 mins to start."
      profile_options:
        image:
          display_name: "Image"
          choices:
            standard:
              display_name: "Standard"
              default: true
              kubespawner_override:
                image: "${singleuser_image_repo}:${singleuser_image_tag}"
            matlab:
              display_name: "MATLAB (must provide your own license)"
              kubespawner_override:
                image: "${singleuser_image_repo}:${singleuser_image_tag}-matlab"
      kubespawner_override:
        image_pull_policy: Always
        cpu_limit: 48
        cpu_guarantee: 24
        mem_limit: 96G
        mem_guarantee: 64G
        node_selector:
          NodePool: default
    - display_name: "T4 GPU for inference"
      description: "8 CPU / 30 GB / 1 T4 GPU. May take up to 15 mins to start."
      profile_options:
        image:
          display_name: "Image"
          choices:
            standard:
              display_name: "Standard GPU"
              default: true
              kubespawner_override:
                image: "${singleuser_image_repo}:${singleuser_image_tag}-gpu"
            matlab:
              display_name: "MATLAB GPU (must provide your own license)"
              kubespawner_override:
                image: "${singleuser_image_repo}:${singleuser_image_tag}-gpu-matlab"
      kubespawner_override:
        image_pull_policy: Always
        cpu_limit: 8
        cpu_guarantee: 6
        mem_limit: 31G
        mem_guarantee: 25G
        extra_resource_limits:
          nvidia.com/gpu: "1"
        node_selector:
          NodePool: gpu
          node.kubernetes.io/instance-type: g4dn.2xlarge
        tolerations:
          - key: "nvidia.com/gpu"
            operator: "Exists"
            effect: "NoSchedule"
          - key: "hub.jupyter.org/dedicated" # According to optimization docs https://z2jh.jupyter.org/en/latest/administrator/optimization.html
            operator: "Equal"
            value: "user"
            effect: "NoSchedule"
