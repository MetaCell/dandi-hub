---
- hosts: localhost
  become: yes
  become_user: root

  vars:
    #swap variables
    swap_file: swapfile

    # certbot variables
    certbot_create_if_missing: false
    certbot_create_method: standalone
    certbot_admin_email: bkandim1@mit.edu
    certbot_create_standalone_stop_services:
      - nginx
    nginx_vhosts:
        - {servername: "hub.dandiarchive.org", documentroot: "/var/www/hub.dandiarchive.org"}


  tasks:
  - name: Install pre-requisite packages
    apt:
      pkg:
        - aptitude
        - git
        - python3.7
        - python3-setuptools
        - nginx
        - vim
        - fail2ban

  - name: Install pip
    shell: |
      echo 'curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py'
      echo 'python3.7 get-pip.py'

  - name: Update all packages to the latest version and remove dependencies that are no longer required
    apt:
      upgrade: dist
      update_cache: yes
      dpkg_options: 'force-confold,force-confdef'

  - name: Setup nginx - edit nginx file
    get_url:
      url: https://raw.githubusercontent.com/dandi/dandihub/master/ansible/1hub.dandiarchive.org.conf
      dest: /etc/nginx/sites-enabled/hub.dandiarchive.org

  - name: Setup nginx - restart nginx
    service:
      name: nginx
      state: restarted

  - name: Setup let's encrypt - add universe repository
    shell:
      echo 'add-apt-repository universe'

  - name: Setup let's encrypt - add certbot repository
    apt_repository:
      repo: 'ppa:certbot/certbot'

  - name: Setup let's encrypt - install certbot's nginx package
    apt:
      name: python-certbot-nginx
      state: present
   
  - name: Setup let's encrypt - check if certificate already exists
    stat:
      path: /etc/letsencrypt/live/{{ item.servername}}/cert.pem
    register: letsencrypt_cert
    with_items: "{{ nginx_vhosts }}"

  - name: Setup let's encrypt - stop services to allow certbot to generate a certificate
    service:
      name: "{{ item }}"
      state: stopped
    with_items:
            -  "{{ certbot_create_standalone_stop_services }}"

  - name: Setup let's encrypt - generate new certificate if one doesn't exist
    shell:
      "certbot certonly --standalone --noninteractive --agree-tos --email {{ certbot_admin_email }} -d {{ item.item.servername}}"
    with_items: "{{ letsencrypt_cert.results }}"
    when: item.stat.exists == False

  - name: Setup let's encrypt - start services after certificate has been generated
    service:
      name: "{{ item }}"
      state: started
    with_items: "{{ certbot_create_standalone_stop_services }}"

  - name: Setup nginx - re-edit nginx file
    get_url:
      url: https://raw.githubusercontent.com/kandimallab/dandihub/master/ansible/hub.dandiarchive.org.conf
      dest: /etc/nginx/sites-enabled/hub.dandiarchive.org

  - name: Install docker
    apt:
      pkg:
        - docker.io

  - name: Enable docker to start on boot and ensure it is not masked
    systemd:
      name: docker
      enabled: yes
      masked: no

  - name: Ensure docker group exists
    group:
      name: docker
      state: present

  - name: Add the home user (ubuntu) to the docker group
    user:
      name: ubuntu
      group: docker

  - name: Change .docker file ownership, group and permissions
    file:
      path: /home/ubuntu/.docker
      owner: ubuntu
      group: ubuntu
      mode: g+rwx
      recurse: yes

  - name: Ensure all docker group changes have taken place
    shell:
      newgrp docker

#  - name: Pull latest DANDI Jupyterhub image
#    docker_image:
#      name: bkandimalla/jupyterhub:dandi-0.2.3
#      source: pull

  - name: Download latest kubectl release
    shell: >
      curl -LO https://storage.googleapis.com/kubernetes-release/release/`
      curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt`/bin/linux/amd64/kubectl
    args:
      warn: false

  - name: Copy kubectl binary to PATH
    copy:
      src: ./kubectl
      dest: /usr/local/bin/kubectl
      follow: no

  - name: Delete original kubectl binary
    file:
      path: ./kubectl
      state: absent

  - name: Change kubectl binary ownership, group and permissions
    file:
      path: /usr/local/bin/kubectl
      mode: +x

  - name: Download latest minikube release
    shell:
      curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
    args:
      warn: false

  - name: Make minikube binary executable
    file:
      path: /usr/local/bin/
      state: directory
      recurse: yes

  - name: Install minikube binary to PATH
    shell:
      install minikube /usr/local/bin

  - name: Delete minikube (start from scratch)
    shell:
      minikube delete

  - name: Start minikube
    shell:
      minikube start --vm-driver=none

  - name: Enable user to use kubectl and minikube commands as own
    become_user: ubuntu
    shell: |
      sudo mv /home/ubuntu/.kube /home/ubuntu/.minikube $HOME
      sudo chown -R $USER $HOME/.kube $HOME/.minikube
    args:
      warn: false

  - name: Set swap file variable
    set_fact:
      swap_file: /{{ swap_file }}

  - name: Register swap file path
    stat:
      path: "{{ swap_file }}"
    register: swap_file_check

  - name: Create swap file and allocate memory
    become_user: ubuntu
    command: sudo fallocate -l 10G {{ swap_file }}
    when: not swap_file_check.stat.exists
    args:
      warn: false

  - name: Change swap file permissions
    file:
      path: "{{ swap_file }}"
      mode: 0600

  - name: Format swap area
    become_user: ubuntu
    command: sudo mkswap {{ swap_file }}
    when: not swap_file_check.stat.exists
    args:
      warn: false

  - name: Activate swap
    become_user: ubuntu
    command: sudo swapon {{ swap_file }}
    args:
      warn: false

  - name: Edit /etc/fstab file to make swap change permenent
    lineinfile:
      dest: /etc/fstab
      regexp: "{{ swap_file }}"
      line: "{{ swap_file }} swap swap sw 0 0"

  - name: Create data directory where data volume will mount
    file:
      path: /data
      state: directory

  - name: Mount and bind data volume
    mount:
      path: /data
      src: /dev/nvme1n1
      state: mounted
      fstype: xfs

  - name: Setup kubernetes deployment of JupyterHub - download deployment.yaml file
    shell:
      wget https://raw.githubusercontent.com/kandimallab/dandihub/master/ansible/deployment.yaml
    args:
      warn: false

  - name: Launch kubernetes deployment
    shell:
      echo 'kubectl create -f deployment.yaml'
#  - name: Port-forward JupyterHub pod to run in background and create log and error log files
#    shell:
#      echo 'nohup kubectl port-forward --pod-running-timeout=15m pod/deployment-jupyter-test 8000:8000 > /home/ubuntu/nohup.out 2> /home/ubuntu/nohup.err &'
