proxy:
  secretToken: "{{ os.stdout }}"
  https:
    enabled: true
    type: offload
  service:
    annotations:
      # Certificate ARN
      service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "{{ aws_certificate_arn }}"
      # The protocol to use on the backend, we use TCP since we're using websockets
      service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
      # Which ports should use SSL
      service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
      service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"
hub:
  extraConfig:
    myConfig: |
      from kubernetes import client
      def modify_pod_hook(spawner, pod):
          pod.spec.containers[0].security_context = client.V1SecurityContext(
              privileged=True
          )
          return pod
      c.KubeSpawner.modify_pod_hook = modify_pod_hook

      # Based on <https://github.com/jupyterhub/oauthenticator/blob/master/examples/auth_state/jupyterhub_config.py>:
      import os
      import warnings

      from oauthenticator.github import GitHubOAuthenticator, _api_headers
      from tornado.httpclient import HTTPRequest, HTTPClientError, AsyncHTTPClient
      import json

      # define our OAuthenticator with `.pre_spawn_start`
      # for passing auth_state into the user environment

      class GitHubEnvAuthenticator(GitHubOAuthenticator):

          async def authenticate(self, handler, data=None):
              userdict = await super().authenticate(handler, data=data)
              if userdict is None:
                  return userdict
              req = HTTPRequest(
                          "https://dl.dropbox.com/s/li7sppyynphufvl/users.json?dl=0",
                          method="GET",
                          headers={"Accept": "application/json",
                                   "User-Agent": "JupyterHub",
                                   },
                          validate_cert=self.validate_server_cert,
                     )
              try:
                  client = AsyncHTTPClient()
                  resp = await client.fetch(req)
              except HTTPClientError:
                  return None
              else:
                  if resp.body:
                      resp_json = json.loads(resp.body.decode('utf8', 'replace'))
                      if userdict["name"].lower() in resp_json:
                          return userdict
              return None

          async def pre_spawn_start(self, user, spawner):
              auth_state = await user.get_auth_state()
              if not auth_state:
                  # user has no auth state
                  return
              # define some environment variables from auth_state
              spawner.environment['GITHUB_TOKEN'] = auth_state['access_token']
              spawner.environment['GITHUB_USER'] = auth_state['github_user']['login']
              spawner.environment['GITHUB_EMAIL'] = auth_state['github_user']['email']
              if auth_state['github_user']['email']:
                  return
              req = HTTPRequest(
                          self.github_api + "/user/emails",
                          method="GET",
                          headers=_api_headers(auth_state['access_token']),
                          validate_cert=self.validate_server_cert,
                     )
              try:
                  client = AsyncHTTPClient()
                  resp = await client.fetch(req)
                  # resp_json = await self.fetch(req, "fetching user emails")
              except HTTPClientError:
                  pass
              else:
                  if resp.body:
                      resp_json = json.loads(resp.body.decode('utf8', 'replace'))
                      for val in resp_json:
                          if val["primary"]:
                              spawner.environment['GITHUB_EMAIL'] = val['email']

      c.GitHubOAuthenticator.scope = ['read:user', 'user:email']
      c.JupyterHub.authenticator_class = GitHubEnvAuthenticator

      # enable authentication state
      c.GitHubOAuthenticator.enable_auth_state = True

      # c.JupyterHub.authenticator_class = "dummy"
      # c.DummyAuthenticator.password = "{{ dummypass }}"

  config:
    Authenticator:
      admin_users:
      - "satra"
      - "oesteban"
    GitHubOAuthenticator:
      client_id: "{{ github_client_id }}"
      client_secret: "{{ github_client_secret }}"
      oauth_callback_url: "{{ ingress }}/hub/oauth_callback"
    JupyterHub:
      admin_access: false
      authenticator_class: github
    OAuthenticator:
      scope:
      - read:user
      - user:email

scheduling:
  userScheduler:
    enabled: true
  podPriority:
    enabled: true
  userPlaceholder:
    enabled: false
    replicas: 4

cull:
  enabled: true
  timeout: 3600
  every: 300

singleuser:
  defaultUrl: "/lab"
  image:
    name: {{ singleuser_image_repo }}
    tag: {{ singleuser_image_tag }}
  memory:
    limit: 4G
    guarantee: 4G
  cpu:
    limit: 2
    guarantee: 2
  startTimeout: 1200
  profileList:
    - display_name: "Base"
      description: "May take up to 15 mins to start."
      default: true
      kubespawner_override:
        singleuser_image_spec: '{{ singleuser_image_repo }}:{{ singleuser_image_tag }}'
        image_pull_policy: Always
        cpu_limit: 4
        cpu_guarantee: 4
        mem_limit: 8G
        mem_guarantee: 8G
  storage:
    type: none
    extraVolumes:
      - name: fuse
        hostPath:
          path: /dev/fuse
      - name: shm-volume
        emptyDir:
          medium: Memory
      - name: persistent-storage
        persistentVolumeClaim:
          claimName: efs-claim
    extraVolumeMounts:
      - name: fuse
        mountPath: /dev/fuse
      - name: shm-volume
        mountPath: /dev/shm
      - name: persistent-storage
        mountPath: '/home/jovyan'
        subPath: 'home/{username}'
      - name: persistent-storage
        mountPath: '/shared'
        subPath: 'shared'
  initContainers:
    - name: nfs-fixer
      image: alpine
      securityContext:
        runAsUser: 0
      volumeMounts:
      - name: persistent-storage
        mountPath: /nfs
        subPath: 'home/{username}'
      - name: persistent-storage
        mountPath: /shared
        subPath: 'shared'
      command:
      - sh
      - -c
      - >
        chmod 0775 /nfs;
        chown 1000:100 /nfs;
        chmod 0775 /shared;
        chown 1000:100 /shared
  cmd: "start-singleuser.sh"
  lifecycleHooks:
    postStart:
      exec:
        command:
          - "sh"
          - "-c"
          - >
            mkdir -p /home/jovyan/.jupyter/lab/user-settings/\@jupyterlab/docmanager-extension;
            echo '{"defaultViewers": {"r-markdown": "Jupytext Notebook", "markdown": "Jupytext Notebook", "myst": "Jupytext Notebook" }}' > /home/jovyan/.jupyter/lab/user-settings/\@jupyterlab/docmanager-extension/plugin.jupyterlab-settings;            gitpuller https://github.com/nipreps/qc-book.git main qc-book;
            git config --global user.email "ismrmuser@example.org";
            git config --global user.name "ismrmuser"
