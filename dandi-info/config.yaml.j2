proxy:
  secretToken: "{{ os.stdout }}"
  https:
    enabled: true
    type: offload
  service:
    annotations:
      # Certificate ARN
      service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "{{ aws_certificate_arn }}"
      # The protocol to use on the backend, we use TCP since we're using websockets
      service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
      # Which ports should use SSL
      service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
      service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "3600"
hub:
  extraConfig:
    myConfig: |
      from kubernetes import client
      def modify_pod_hook(spawner, pod):
          pod.spec.containers[0].security_context = client.V1SecurityContext(
              privileged=True
          )
          return pod
      c.KubeSpawner.modify_pod_hook = modify_pod_hook

      # Based on <https://github.com/jupyterhub/oauthenticator/blob/master/examples/auth_state/jupyterhub_config.py>:
      import os
      import warnings

      from oauthenticator.github import GitHubOAuthenticator

      # define our OAuthenticator with `.pre_spawn_start`
      # for passing auth_state into the user environment

      class GitHubEnvAuthenticator(GitHubOAuthenticator):

          async def pre_spawn_start(self, user, spawner):
              auth_state = await user.get_auth_state()
              import pprint
              pprint.pprint(auth_state)
              if not auth_state:
                  # user has no auth state
                  return
              # define some environment variables from auth_state
              spawner.environment['GITHUB_TOKEN'] = auth_state['access_token']
              spawner.environment['GITHUB_USER'] = auth_state['github_user']['login']
              spawner.environment['GITHUB_EMAIL'] = auth_state['github_user']['email']

      c.GitHubOAuthenticator.scope = ['gist', 'user:email']
      c.JupyterHub.authenticator_class = GitHubEnvAuthenticator

      # enable authentication state
      c.GitHubOAuthenticator.enable_auth_state = True

  config:
    Authenticator:
      admin_users:
      - "satra"
      - "yarikoptic"
      - "dandibot"
      allowed_users:
      - "aabbasi89"
      - "abbydichter"
      - "alan"
      - "alandegenhart"
      - "alanoudalsubhi"
      - "alejoe91"
      - "alexandrepsq"
      - "almightyyakob"
      - "annechurchland"
      - "anukratinigam"
      - "aojie1997"
      - "arokem"
      - "arsenyf"
      - "asurkis99"
      - "balbasty"
      - "bekalmbach"
      - "bendichter"
      - "benefron"
      - "bgomes94"
      - "bittu-k"
      - "bmbohannon"
      - "borrepp"
      - "brandon"
      - "brianhelba"
      - "byee4"
      - "carolth"
      - "ccmaco"
      - "chockalingam31"
      - "chrisvdt"
      - "codewander94"
      - "codycbakerphd"
      - "colleenjg"
      - "cornua1"
      - "courtnie2894"
      - "da5nsy"
      - "danielsf"
      - "danlamanna"
      - "daskandalis"
      - "dchiquit"
      - "deeptimittal12"
      - "delhayeben"
      - "djarecka"
      - "doya-oist"
      - "drbkimmel"
      - "eduardacenteno"
      - "emilyasterjones"
      - "emmanuelwilson"
      - "everythingevolves"
      - "ezavitz"
      - "fangxia1997"
      - "farznaj"
      - "felixp8"
      - "filippomc"
      - "flavia0310"
      - "francopestilli"
      - "georginjacob"
      - "gmazzamuto"
      - "guangwei-zhang"
      - "iryna.yavorska"
      - "jajo"
      - "jeiglesias"
      - "jellywang-3"
      - "jeromelecoq"
      - "jiaxx"
      - "jitenderk304"
      - "jocelynmora"
      - "jryang"
      - "jtomeck"
      - "juliasprenger"
      - "jwodder"
      - "jylb"
      - "kaeldai"
      - "lawrencen"
      - "ldreyes08"
      - "leebrianr"
      - "leekamentsky"
      - "lmanubens"
      - "luiztauffer"
      - "lukko45"
      - "lydiang"
      - "macasal"
      - "markplitt"
      - "matthewma"
      - "maxpmx"
      - "mgrauer"
      - "mhhennig"
      - "michaelfeyerabend"
      - "mikhailberezin"
      - "mpompolas"
      - "mrglea002"
      - "mvandenburgh"
      - "mvdm"
      - "nandchandravadia"
      - "nbonacchi"
      - "nicolocin"
      - "nilegraddis"
      - "nmtimme"
      - "nsteinme"
      - "oruebel"
      - "osbornepb"
      - "petralenzini"
      - "pgleeson"
      - "plain"
      - "publish"
      - "rachaelgarner"
      - "rly1"
      - "saksham20"
      - "saskiad"
      - "seqasim"
      - "servillej"
      - "sgratiy"
      - "shaunc"
      - "shobel"
      - "soichih"
      - "stripathy"
      - "subdavis"
      - "superiorvii"
      - "tclarke"
      - "t-b"
      - "tmchartrand"
      - "transedward"
      - "trile965"
      - "ttngu207"
      - "ucdnjj"
      - "urut"
      - "visakhmr"
      - "vmg55"
      - "waxlamp"
      - "wbwakeman"
      - "wclee"
      - "yavorska-iryna"
      - "ybernaerts"
      - "yonkatz"
      - "yshaeri"
      - "zachmullen"
      - "zpkilpat"
    GitHubOAuthenticator:
      client_id: "{{ github_client_id }}"
      client_secret: "{{ github_client_secret }}"
      oauth_callback_url: "{{ ingress }}/hub/oauth_callback"
    JupyterHub:
      admin_access: false
      authenticator_class: github
    OAuthenticator:
      scope:
      - read:user

scheduling:
  userScheduler:
    enabled: true
  podPriority:
    enabled: true
  userPlaceholder:
    enabled: false
    replicas: 4

cull:
  enabled: true
  timeout: 3600
  every: 300

singleuser:
  defaultUrl: "/lab"
  image:
    name: {{ singleuser_image_repo }}
    tag: {{ singleuser_image_tag }}
  memory:
    limit: 16G
    guarantee: 1G
  cpu:
    limit: 12
    guarantee: 0.5
  profileList:
    - display_name: "tiny"
      description: "0.5 CPU / 1 GB"
      kubespawner_override:
        singleuser_image_spec: '{{ singleuser_image_repo }}:{{ singleuser_image_tag }}'
        cpu_limit: 2
        cpu_guarantee: 0.5
        mem_limit: 2G
        mem_guarantee: 1G
    - display_name: "base"
      description: "6 CPU / 16 GB"
      default: true
      kubespawner_override:
        singleuser_image_spec: '{{ singleuser_image_repo }}:{{ singleuser_image_tag }}'
        cpu_limit: 6
        cpu_guarantee: 6
        mem_limit: 16G
        mem_guarantee: 16G
    - display_name: "large"
      description: "36 CPU / 96 GB"
      kubespawner_override:
        singleuser_image_spec: '{{ singleuser_image_repo }}:{{ singleuser_image_tag }}'
        cpu_limit: 36
        cpu_guarantee: 36
        mem_limit: 96G
        mem_guarantee: 96G
    - display_name: "extra large"
      description: "60 CPU / 160 GB"
      kubespawner_override:
        singleuser_image_spec: '{{ singleuser_image_repo }}:{{ singleuser_image_tag }}'
        cpu_limit: 60
        cpu_guarantee: 60
        mem_limit: 160G
        mem_guarantee: 160G
  storage:
    type: none
    extraVolumes:
      - name: fuse
        hostPath:
          path: /dev/fuse
      - name: shm-volume
        emptyDir:
          medium: Memory
      - name: persistent-storage
        persistentVolumeClaim:
          claimName: efs-claim
    extraVolumeMounts:
      - name: fuse
        mountPath: /dev/fuse
      - name: shm-volume
        mountPath: /dev/shm
      - name: persistent-storage
        mountPath: '/home/jovyan'
        subPath: 'home/{username}'
      - name: persistent-storage
        mountPath: '/shared'
        subPath: 'shared'
  initContainers:
    - name: nfs-fixer
      image: alpine
      securityContext:
        runAsUser: 0
      volumeMounts:
      - name: persistent-storage
        mountPath: /nfs
        subPath: 'home/{username}'
      - name: persistent-storage
        mountPath: /shared
        subPath: 'shared'
      command:
      - sh
      - -c
      - >
        chmod 0775 /nfs;
        chown 1000:100 /nfs;
        chmod 0775 /shared;
        chown 1000:100 /shared
  cmd: "start-singleuser.sh"
  lifecycleHooks:
    postStart:
      exec:
        command:
          - "sh"
          - "-c"
          - >
            gitpuller https://github.com/dandi/example-notebooks master dandi-notebooks;
            chown -R jovyan:users dandi-notebooks;
            datalad install https://github.com/dandi/dandisets;
            /opt/conda/bin/pip install --upgrade dandi;
            /opt/conda/envs/ros3/bin/python -m ipykernel install --user --name ros3 --display-name "Python (Streaming support)"
